# tclConfig.sh --
#
# This file is automagically generated by the Tcl CMake build script.
# The intent is to provide the correct shell variables as by the original
# tclConfig.sh as provided by Tcl's AutoConf files.
#
# Not that this file is probably buggy as all f**k.
#
# The information in this file is still specific to a single platform.
$<0:While reading the source, these lines are comments.>

TCL_DLL_FILE="$<TARGET_FILE_NAME:tcl>"

# Tcl's version number.
TCL_VERSION='@TCL_VERSION@'
TCL_MAJOR_VERSION='@TCL_MAJOR_VERSION@'
TCL_MINOR_VERSION='@TCL_MINOR_VERSION@'
TCL_PATCH_LEVEL='@TCL_PATCH_LEVEL@'

# C compiler to use for compilation.
TCL_CC='@CMAKE_C_COMPILER@'

# -D flags for use with the C compiler.
TCL_DEFS='$<$<BOOL:$<TARGET_PROPERTY:tcl,INTERFACE_COMPILE_DEFINITIONS>>:-D$<JOIN:$<TARGET_PROPERTY:tcl,INTERFACE_COMPILE_DEFINITIONS>, -D>>'

# If TCL was built with debugging symbols, generated libraries contain
# this string at the end of the library name (before the extension).
$<0:Build suffixes are for the weak and fools>
$<0:A debug build should never leave your build system's boundaries therefore this thing is meaningless>
TCL_DBGX=

# Default flags used in an optimized and debuggable build, respectively.
TCL_CFLAGS_DEBUG='@CMAKE_C_FLAGS_DEBUG@ $<JOIN:$<TARGET_PROPERTY:tcl,INTERFACE_COMPILE_OPTIONS>, >'
TCL_CFLAGS_OPTIMIZE='@CMAKE_C_FLAGS_RELEASE@ $<JOIN:$<TARGET_PROPERTY:tcl,INTERFACE_COMPILE_OPTIONS>, >'

# Default linker flags used in an optimized and debuggable build, respectively.
TCL_LDFLAGS_DEBUG='$<JOIN:$<TARGET_PROPERTY:tcl,INTERFACE_LINK_OPTIONS>, >'
TCL_LDFLAGS_OPTIMIZE='$<JOIN:$<TARGET_PROPERTY:tcl,INTERFACE_LINK_OPTIONS>, >'

# Flag, 1: we built a shared lib, 0 we didn't
TCL_SHARED_BUILD=$<BOOL:@TCL_BUILD_SHARED@>

# The name of the Tcl library (may be either a .a file or a shared library):
TCL_LIB_FILE='$<TARGET_LINKER_FILE:tcl>'

# Flag to indicate whether shared libraries need export files.
$<0:CMake by default exports all on AIX, and for Windows we don't need a different file>
TCL_NEEDS_EXP_FILE=$<$<PLATFORM_ID:AIX>:$<NOT:$<TARGET_PROPERTY:tcl,AIX_EXPORT_ALL_SYMBOLS>>>

# String that can be evaluated to generate the part of the export file
# name that comes after the "libxxx" (includes version number, if any,
# extension, and anything else needed).  May depend on the variables
# VERSION.  On most UNIX systems this is ${VERSION}.exp.
TCL_EXPORT_FILE_SUFFIX='@TCL_DOUBLE_VERSION@@CMAKE_IMPORT_LIBRARY_SUFFIX@'

# Additional libraries to use when linking Tcl.
TCL_LIBS='$<$<BOOL:@TCL_LIBS@>:@CMAKE_LINK_LIBRARY_FLAG@$<JOIN:@TCL_LIBS@,$<@IS_IMP_LIB@:@CMAKE_IMPORT_LIBRARY_SUFFIX@> @CMAKE_LINK_LIBRARY_FLAG@>@CMAKE_IMPORT_LIBRARY_SUFFIX@>'

# Top-level directory in which Tcl's platform-independent files are
# installed.
TCL_PREFIX='@CMAKE_INSTALL_PREFIX@'

# Top-level directory in which Tcl's platform-specific files (e.g.
# executables) are installed.
TCL_EXEC_PREFIX='@CMAKE_INSTALL_PREFIX@'

# Flags to pass to cc when compiling the components of a shared library:
TCL_SHLIB_CFLAGS='@CMAKE_C_FLAGS@'

# Flags to pass to cc to get warning messages
TCL_CFLAGS_WARNING=''

# Extra flags to pass to cc:
TCL_EXTRA_CFLAGS=''

# Base command to use for combining object files into a shared library:
TCL_SHLIB_LD='@TCL_LD@ $<JOIN:$<TARGET_PROPERTY:tcl,LINK_OPTIONS>, >'

# Base command to use for combining object files into a static library:
$<0:If not MSVC we assume UNIX-ish ar which accepts "cr">
TCL_STLIB_LD='@TCL_AR@ $<JOIN:$<TARGET_PROPERTY:tclstub,LINK_OPTIONS>, >'

# Either '$LIBS' (if dependent libraries should be included when linking
# shared libraries) or an empty string.  See Tcl's configure.in for more
# explanation.
TCL_SHLIB_LD_LIBS='${LIBS}'

# Suffix to use for the name of a shared library.
TCL_SHLIB_SUFFIX='@CMAKE_SHARED_LIBRARY_SUFFIX@'

# Library file(s) to include in tclsh and other base applications
# in order to provide facilities needed by DLOBJ above.
TCL_DL_LIBS='@CMAKE_DL_LIBS@'

# Flags to pass to the compiler when linking object files into
# an executable tclsh or tcltest binary.
TCL_LD_FLAGS='@CMAKE_EXE_LINKER_FLAGS@'

# Flags to pass to cc/ld, such as "-R /usr/local/tcl/lib", that tell the
# run-time dynamic linker where to look for shared libraries such as
# libtcl.so.  Used when linking applications.  Only works if there
# is a variable "LIB_RUNTIME_DIR" defined in the Makefile.
TCL_CC_SEARCH_FLAGS=''
TCL_LD_SEARCH_FLAGS=''

# Additional object files linked with Tcl to provide compatibility
# with standard facilities from ANSI C or POSIX.
TCL_COMPAT_OBJS='$<$<BOOL:@TCL_COMPAT_FILES@>:$<JOIN:@TCL_COMPAT_FILES@,@CMAKE_C_OUTPUT_EXTENSION@ >>'

# Name of the ranlib program to use.
TCL_RANLIB='@CMAKE_RANLIB@'

# -l flag to pass to the linker to pick up the Tcl library
TCL_LIB_FLAG='@TCL_LINK_FLAG@'

# String to pass to linker to pick up the Tcl library from its
# build directory.
TCL_BUILD_LIB_SPEC='@CMAKE_LIBRARY_PATH_FLAG@"$<TARGET_FILE_DIR:tcl>" @TCL_LINK_FLAG@'

# String to pass to linker to pick up the Tcl library from its
# installed directory.
TCL_LIB_SPEC='@CMAKE_LIBRARY_PATH_FLAG@"@CMAKE_INSTALL_FULL_LIBDIR@" @TCL_LINK_FLAG@'

# String to pass to the compiler so that an extension can
# find installed Tcl headers.
TCL_INCLUDE_SPEC='-I"@CMAKE_INSTALL_FULL_INCLUDEDIR@"'

# Indicates whether a version numbers should be used in -l switches
# ("ok" means it's safe to use switches like -ltcl7.5;  "nodots" means
# use switches like -ltcl75).  SunOS and FreeBSD require "nodots", for
# example.
$<0:There is no reason for use to use those things. We build targets without dots>
TCL_LIB_VERSIONS_OK='nodots'

# String that can be evaluated to generate the part of a shared library
# name that comes after the "libxxx" (includes version number, if any,
# extension, and anything else needed).  May depend on the variables
# VERSION and SHLIB_SUFFIX.  On most UNIX systems this is
# ${VERSION}${SHLIB_SUFFIX}.
TCL_SHARED_LIB_SUFFIX='@TCL_DOUBLE_VERSION@@CMAKE_SHARED_LIBRARY_SUFFIX@'

# String that can be evaluated to generate the part of an unshared library
# name that comes after the "libxxx" (includes version number, if any,
# extension, and anything else needed).  May depend on the variable
# VERSION.  On most UNIX systems this is ${VERSION}.a.
TCL_UNSHARED_LIB_SUFFIX='@TCL_DOUBLE_VERSION@@CMAKE_STATIC_LIBRARY_SUFFIX@'

# Location of the top-level source directory from which Tcl was built.
# This is the directory that contains a README file as well as
# subdirectories such as generic, unix, etc.  If Tcl was compiled in a
# different place than the directory containing the source files, this
# points to the location of the sources, not the location where Tcl was
# compiled.
# This is not defined correctly because we *REALLY* changed project layout
# and would lead to confusion
# Fancy ASCII art as we hope to force a failure upon use
TCL_SRC_DIR='\\(*)-/SEE PROVIDED tclConfig.sh FOR REASONING WHY YOU SEE THIS/-(*)\\'

# List of standard directories in which to look for packages during
# "package require" commands.  Contains the "prefix" directory plus also
# the "exec_prefix" directory, if it is different.
TCL_PACKAGE_PATH='{@CMAKE_INSTALL_FULL_LIBDIR@}'

# Tcl supports stub. $<0:We always support stubs>
TCL_SUPPORTS_STUBS=1

# The name of the Tcl stub library (.a):
TCL_STUB_LIB_FILE='$<TARGET_FILE_NAME:tclstub>'

# -l flag to pass to the linker to pick up the Tcl stub library
TCL_STUB_LIB_FLAG='@TCLSTUB_LINK_FLAG@'

# String to pass to linker to pick up the Tcl stub library from its
# build directory.
TCL_BUILD_STUB_LIB_SPEC='@CMAKE_LIBRARY_PATH_FLAG@"$<TARGET_FILE_DIR:tclstub>" @TCLSTUB_LINK_FLAG@'

# String to pass to linker to pick up the Tcl stub library from its
# installed directory.
TCL_STUB_LIB_SPEC='@CMAKE_LIBRARY_PATH_FLAG@"@CMAKE_INSTALL_FULL_LIBDIR@" @TCLSTUB_LINK_FLAG@'

# Path to the Tcl stub library in the build directory.
TCL_BUILD_STUB_LIB_PATH='$<TARGET_FILE:tclstub>'

# Path to the Tcl stub library in the install directory.
TCL_STUB_LIB_PATH='@CMAKE_INSTALL_FULL_LIBDIR@/$<TARGET_FILE_NAME:tclstub>'

# Flag, 1: we built Tcl with threads enabled, 0 we didn't
TCL_THREADS=$<BOOL:@TCL_ENABLE_THREADS@>

